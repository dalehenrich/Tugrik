3.3 Thread Safe GCI calls:
--------------------------

EXTERN_GCI_DEC(char*) GciTsEncrypt(const char* password, char *outBuf, size_t outBuffSize);
EXTERN_GCI_DEC(GciSession) GciTsLogin(
    const char *StoneNameNrs,
    const char *HostUserId, 
    const char *HostPassword, BoolType hostPwIsEncrypted,
    const char *GemServiceNrs,
    const char *gemstoneUsername, const char *gemstonePassword,
    unsigned int loginFlags /* per GCI_LOGIN* in gci.ht */ ,
    int haltOnErrNum, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsLogout(GciSession sess, GciErrSType *err);
EXTERN_GCI_DEC(int) GciTsSessionIsRemote(GciSession sess);
EXTERN_GCI_DEC(int) GciTsGemTrace(GciSession sess, int enable, GciErrSType *err);
EXTERN_GCI_DEC(OopType) GciTsResolveSymbol(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsResolveSymbolObj(GciSession sess, 
EXTERN_GCI_DEC(int) GciTsGetFreeOops(GciSession sess, OopType *buf, int numOopsRequested, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsSaveObjs(GciSession sess, OopType *buf, int count, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsReleaseObjs(GciSession sess, OopType *buf, int count, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsReleaseAllObjs(GciSession sess, GciErrSType *err);
EXTERN_GCI_DEC(int64) GciTsFetchBytes(GciSession sess,
EXTERN_GCI_DEC(int64) GciTsFetchChars(GciSession sess,
EXTERN_GCI_DEC(int64) GciTsFetchUtf8Bytes(GciSession sess,
EXTERN_GCI_DEC(BoolType) GciTsStoreBytes(GciSession sess,
EXTERN_GCI_DEC(int) GciTsFetchOops(GciSession sess,
EXTERN_GCI_DEC(BoolType) GciTsStoreOops(GciSession sess,
EXTERN_GCI_DEC(int) GciTsRemoveOopsFromNsc(GciSession sess, 
EXTERN_GCI_DEC(int64) GciTsFetchObjInfo(GciSession sess, OopType objId, 
EXTERN_GCI_DEC(int64) GciTsFetchSize(GciSession sess, OopType obj, GciErrSType *err);
EXTERN_GCI_DEC(int64) GciTsFetchVaryingSize(GciSession sess, OopType obj, GciErrSType *err);
EXTERN_GCI_DEC(OopType) GciTsFetchClass(GciSession sess, OopType obj, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsObjExists(GciSession sess, OopType obj);
EXTERN_GCI_DEC(int) GciTsIsKindOf(GciSession sess, 
EXTERN_GCI_DEC(int) GciTsIsSubclassOf(GciSession sess, 
EXTERN_GCI_DEC(int) GciTsIsKindOfClass(GciSession sess, 
EXTERN_GCI_DEC(int) GciTsIsSubclassOfClass(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsNewObj(GciSession sess, OopType aClass, GciErrSType *err);
EXTERN_GCI_DEC(OopType) GciTsNewByteArray(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsNewString_(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsNewString(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsNewSymbol(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsNewUnicodeString_(GciSession s,
EXTERN_GCI_DEC(OopType) GciTsNewUnicodeString(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsNewUtf8String(GciSession sess, 
EXTERN_GCI_DEC(OopType) GciTsNewUtf8String_(GciSession sess, 
EXTERN_GCI_DEC(int64) GciTsFetchUnicode(GciSession sess,
EXTERN_GCI_DEC(int64) GciTsFetchUtf8(GciSession sess,
EXTERN_GCI_DEC(BoolType) GciTsClearStack(GciSession sess, OopType gsProcess, GciErrSType *err);
EXTERN_GCI_DEC(OopType) GciTsPerform(GciSession sess,
EXTERN_GCI_DEC(OopType) GciTsExecute(GciSession sess,
EXTERN_GCI_DEC(OopType) GciTsExecute_(GciSession sess,
EXTERN_GCI_DEC(ssize_t) GciTsExecuteFetchBytes(GciSession sess,
EXTERN_GCI_DEC(BoolType) GciTsClassRemoveAllMethods(GciSession sess, 
EXTERN_GCI_DEC(BoolType) GciTsProtectMethods(GciSession sess, BoolType mode, GciErrSType *err);
EXTERN_GCI_DEC(OopType) GciTsCompileMethod(GciSession sess,
EXTERN_GCI_DEC(OopType) GciTsContinueWith(GciSession sess,
EXTERN_GCI_DEC(BoolType) GciTsAbort(GciSession sess, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsBegin(GciSession sess, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsCommit(GciSession sess, GciErrSType *err);
EXTERN_GCI_DEC(int) GciTsStoreTravDoTravRefs(GciSession sess,
EXTERN_GCI_DEC(BoolType) GciTsStoreTrav(GciSession sess, 
EXTERN_GCI_DEC(int) GciTsMoreTraversal(GciSession sess,
EXTERN_GCI_DEC(BoolType) GciTsOopIsSpecial(OopType oop);
EXTERN_GCI_DEC(OopType)  GciTsFetchSpecialClass(OopType oop);
EXTERN_GCI_DEC(int) GciTsOopToChar(OopType oop);
EXTERN_GCI_DEC(OopType) GciTsCharToOop(uint ch);
EXTERN_GCI_DEC(OopType) GciTsDoubleToSmallDouble(double aFloat);
EXTERN_GCI_DEC(OopType) GciTsDoubleToOop(GciSession sess, double aDouble, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsOopToDouble(GciSession sess, OopType oop,
EXTERN_GCI_DEC(OopType) GciI32ToOop(int arg);
EXTERN_GCI_DEC(OopType) GciTsI64ToOop(GciSession sess, int64 arg, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsOopToI64(GciSession sess, OopType oop, int64 *result, GciErrSType *err);
EXTERN_GCI_DEC(BoolType) GciTsBreak(GciSession sess, BoolType hard, GciErrSType *err);
EXTERN_GCI_DEC(int) GciTsWaitForEvent(GciSession sess, int latencyMs,
EXTERN_GCI_DEC(BoolType) GciTsCancelWaitForEvent(GciSession sess, GciErrSType *err);
EXTERN_GCI_DEC(uint) GciTsVersion(char *buf, size_t bufSize);


